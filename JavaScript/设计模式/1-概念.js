/**
 * 01 代码与设计模式
·项目 = 模块 + 沟通
·设计模式扮演的角色
·帮助我们组织模块
--通过设计模式，组织模块键的组成结构
·帮助我们设计沟通
--有的设计模式可以帮助我们设计模块间如何沟通
·提高代码质量
--通过设计模式，使代码更优雅
02 设计原则
1.开闭原则
--不能修改源码，并留出使用时扩展接口
2.单一职责原则
3.依赖倒置原则
--指设计代码结构时，高层模块不应该依赖低层模块，二者都应该依赖其抽象
 */

/**依赖倒置原则:
//抽象不应该依赖细节，细节应该依赖抽象。
//通过依赖倒置，可以减少类与类之间的耦合性，提
//高系统的稳定性，提高代码的可读性和可维护性，
//并且能够降低修改程序所造成的风险
*
*/

function food1(){
  
}
function food2(){
    
}
function food3(){
    
}
function food4(){
    
}
//如果依赖于具体，那么我们食物发生变动时，我们点餐方法也要发生剧烈变动
//所以我们点餐不要依赖于具体的食物，改成依赖某个抽象餐馆
function order(){
 
}
order.prototype.orderFood1=function(){

}
order.prototype.orderFood2=function(){
    
}
order.prototype.orderFood3=function(){
    
}
//所以这样做
//定义一个餐馆接口来代替直接依赖具体食物
function resturn(food){
   var list={
     food1:new food1(),
     food2:new food2(),
     food3:new food3()
   }
   return list[food];
}
//这样当食物发生变动。就不用改变点餐类
function order(food){
  return resturn(food)
}

/**
 * 4.接口隔离原则(ISP)
--使用多个专门的接口比使用单个接口要好很多
5.迪米特法则
--talk only to your immediate friends 
--两个沟通的对象没必要互相了解
6.里氏替换原则
--子类可以扩展父类的功能，但不能改变父类原有的功能

03 设计模式分类
创建型 ---更有的创造对象
结构型 ---优雅的设计代码结构
行为型 ---模块之间行为的模式总结，帮助我们组织模块行为
技巧型 --- 优化代码技巧

·创建型
工厂模式--大量创建对象
单列模式--全局只能有我一个
建造者模式--精细化组合对象
原型模式--Javascript的灵魂

·结构型
外观模式-给你的一个套餐
享元模式-共享来减少数量
适配器模式-用适配代替更改
桥接模式-独立出来，然后再对接过去
装饰者模式-更优雅的扩展需求

·行为型
观察者模式-我作为第三方转发
职责链模式-像生产线一样组织模块
状态模式-用状态代替判断
命令模式-用命令去解耦
策略模式-算法工厂
迭代器模式-告别for循环

·技巧型
链模式-链式调用
惰性模式-我要搞机器学习
委托模式-让别人代替你收快递
等待者模式-等你们都回来再吃饭
数据访问模式-一个方便的数据管理器
 * 
*/
